app.num.records=10
app.delay.millis=1000
app.path.to.images=docker/data/images/
%k8s.app.kafka.bootstrap.servers=my-cluster-kafka-bootstrap:9092
%prod.app.kafka.bootstrap.servers=kafka:9092
%dev.app.kafka.bootstrap.servers=localhost:${quarkus.kafka.devservices.port}
app.kafka.topic=my_image_stream_topic
app.kafka.record.key.serde=org.apache.kafka.common.serialization.StringSerializer
app.kafka.record.value.serde=org.apache.kafka.common.serialization.StringSerializer
app.kafka.consumer.group.id=

serde.s3.base.path=s3://eda-ccp-s3/
%k8s.serde.s3.endpoint=
%prod.serde.s3.endpoint=http://minio:9000/
%dev.serde.s3.endpoint=http://localhost:9000/
serde.s3.region=no-region
serde.s3.access.key=l0w8nBo4n61eTqe1
serde.s3.secret.key=v72uuD5yu0l3LtfWuxpqyoWZBOXOGOdN
serde.s3.with.headers=true
serde.s3.max.bytes.size=10

quarkus.banner.enabled=false
quarkus.log.category."io.quarkus".level=FATAL
quarkus.kafka.devservices.port=29092
quarkus.package.type=jar

quarkus.container-image.group=rhdevelopers
quarkus.container-image.name=eda-claim-check-pattern
quarkus.container-image.tag=v23.02
quarkus.container-image.registry=quay.io
quarkus.container-image.builder=jib
quarkus.container-image.build=true
quarkus.container-image.push=false

quarkus.kubernetes.service-type=load-balancer
quarkus.kubernetes.image-pull-policy=if-not-present
quarkus.kubernetes.deploy=false
quarkus.kubernetes.env.vars.quarkus_profile=k8s
